{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HUIT Academic Technology JupyterHub","text":"<p>HUIT Academic Technology provides a JupyterHub platform for use in FAS courses. This tool is set up to integrate into an existing Canvas course. If needed, a customized Python environment can be configured with specific packages that are necessary for work in a course.</p> <p>To request JupyterHub or another academic computing platform for your FAS course, please visit atg.fas.harvard.edu/academic-computing</p> <p>This site provides an overview of how our implementation of JupyterHub works, as well as pointers to how Jupyter environments work more generally.</p>"},{"location":"adding-packages/","title":"Adding Packages","text":"<p>Our Python configuration is based on the Jupyter scipy notebook stack, which includes many of the most common packages for use in data collection and analysis in Python. In addition, instructors can request a customized environment with specific packages pre-installed for use in a course.</p> <p>However, there may still be cases where you want to install additional packages in this environment. In this JupyterHub configuration, every time you start your server, a new AWS server resource is allocated to run that server using the default configuration for your course. That means that any additional modules must be configured from your persistent home directory, rather than elsewhere on the system, which is being replaced regularly.</p> <p>To configure packages locally, you will need to first create a local environment in your home directory using <code>mamba</code>. Then, you will need to register that environment with ipython to use it as a kernel in your JupyterLab environment.</p>"},{"location":"adding-packages/#configuring-a-local-environment","title":"Configuring a Local Environment","text":"<p>Configuring a local environment will require use of the terminal in JupyterLab. To configure such an environment, use the commands below. Comments have been added with additional instructions. Where you see \"environmentName\", you can replace it with a folder name that you prefer to use. This will be the folder that contains the environment in your home directory. You can also replace \"DisplayName\" with a preferred name for your environment as it appears in the JupyterLab interface. You can use the same name as your folder name, just know that the two are not necessarily related. Neither the folder name nor the display name should contain spaces.</p> <pre><code>mamba create --prefix ./environmentName\nmamba init\n# close and re-open the terminal\nmamba activate ./environmentName\nmamba install ipykernel\n# install other packages with mamba install\nipython kernel install --user --name=DisplayName\n</code></pre>"},{"location":"adding-packages/#using-the-new-kernel","title":"Using the New Kernel","text":"<p>Once you have run these commands successfully, you should see a new option with the same name that you used for \"DisplayName\" when launching a new notebook. To use the new environment in an existing notebook, open that notebook, then click on the current kernel name in the top right (the default is \"Python3 (ipykernel)\"). This will bring up a pop-up with a dropdown menu where you can change the kernel to match your new environment. After doing this, you should restart your notebook's kernel from the \"Kernel\" menu at the top of the page.</p> <p>Once you have your environment configured, you can add more packages to it by activating it, then using <code>mamba install</code> to configure more packages, like so:</p> <pre><code>mamba activate ./environmentName\nmamba install numpy pandas matplotlib\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Once JupyterHub has been added to your Canvas site, students and teaching staff in the course will see a \"JupyterHub\" link in the left hand navigation of their Canvas page.</p> <p>Clicking that link will give access to the JupyterHub dashboard, where a blue \"Start My Server\" button can be found. Clicking that link will start the process of allocating resources where the JupyterLab instance will run. This process will take a few minutes, but once the server is created, it can be used for as long as you like.</p>"},{"location":"getting-started/#file-storage","title":"File Storage","text":"<p>Each JupyterLab instance has a persistent home directory for storing files related to your work. Anything you save there will be available until you remove it, or until the JupyterHub platform is cleaned up after the end of each semester.</p> <p>However, files stored outside of the home directory will not persist between working sessions, so do not save any data that you wish to keep outside of your home directory. JupyterLab will default to saving files here, but if you try to install new Python packages, they will not persist unless you set up an environment inside your home directory. More information about this process can be found in the documentation on adding packages</p> <p>Since the JupyterLab environment is running in a remote server, you will need to upload any files you want to work with in JupyterLab, and download any files you wish to save to your computer or submit for grading. For an overview of uploading and downloading files, see the JupyterLab documentation on uploads and downloads</p>"},{"location":"getting-started/#packages-available","title":"Packages Available","text":"<p>The environment that we provide is based on the scipy-notebook Docker image, so all of the packages configured in that image are available in our instance of JupyterHub. This includes many of the most common data analysis libraries, such as <code>numpy</code>, <code>pandas</code>, <code>matplotlib</code>, <code>scipy</code>, <code>scikit-learn</code>, and <code>seaborn</code>.</p> <p>To get a full list of packages available, start a terminal and run <code>mamba list</code>. After a short delay, you will see a list of every package available in the environment.</p> <p>If you need to use a package other than the ones available, refer to our documentation on adding packages.</p>"},{"location":"jupyterlab/","title":"JupyterLab General documentation","text":"<p>Our JupyterHub service uses the JupyterLab interface. The main JupyterLab documentation is an excellent resource on the interface, and teaching staff may want to direct students to particular portions of the documentation for an overview of how to perform tasks related to their coursework.</p>"},{"location":"shared-folder/","title":"JupyterHub Shared Folder","text":"<p>On request, it's possible to set up a shared folder in JupyterHub. However, this is not done by default, as managing permissions in the shared folder will require ongoing work from teaching staff in a course. Managing files in the shared folder will require the use of the terminal in JupyterHub, and users will benefit from general knowledge of Unix filesystem permissions.</p> <p>If you're already familiar with setting file permissions in a Unix system, here is some information about the setup so you can manage it. There is a group with gid 3000 called <code>teachingstaff</code> that course instructors and TAs/TFs are included in. This is the group owner of the <code>course_data</code> folder located at <code>/home/course_data</code>, parallel with user home folders. JupyterHub sets a default <code>umask 0077</code>, so permissions will be 600 or 700 by default. For use in courses, we recommend group read/write access and global read access, so 664 or 775. File owners can use chmod commands to modify permissions appropriately.</p>"},{"location":"shared-folder/#creating-files-with-appropriate-permissions","title":"Creating Files with Appropriate Permissions","text":"<p>Since JupyterHub is configured with a shared file system, JupyterHub is configured to ensure that new files that are created are only accessible by the creator of that file. It does this with the use of a <code>umask</code>, which sets the default permissions of newly created files. The default is to create files with no access other than by the file owner.</p> <p>To change this default in order to create files that are accessible by other users, it's necessary to change the umask. A command that will change the <code>umask</code> for adding files to the shared folder is <code>umask 0002</code>. After this command is run, all files created in that terminal session will give read/write access to the owner and the group owner (the teaching staff group in the shared folder), and global read access so students can have read-only access to shared files.</p> <p>The <code>umask</code> command only affects the terminal, and only affects the terminal session in which it was run. If you close the terminal and start a new one, you will need to run <code>umask 0002</code> again before the default permissions will be set appropriately.</p>"},{"location":"shared-folder/#fixing-permissions-on-existing-files","title":"Fixing Permissions on Existing Files","text":"<p>For files that were created outside of the terminal, or in the case of files that were created when the <code>umask</code> was set at the default value, file and folder owners can change the permissions to open them up to provide read/write access to teaching staff. The following commands should fix permissions when run from <code>/home/course_data</code>:</p> <pre><code># Grant read/write access to the group owner\nchmod -R g+rw .\n# Grant read access globally so students can read files\nchmod -R o+r .\n# Ensure that folders work properly for everyone\nchmod -R go+X .\n</code></pre>"},{"location":"shared-folder/#making-the-shared-folder-more-visible","title":"Making the Shared Folder More Visible","text":"<p>The shared folder is located at <code>/home/course_data</code>. This is parallel to user home directories, so any user can access it through the termial at <code>../course_data</code>. However, it does not appear in the user interface for JupyterHub. To make it appear in the interface, you can create a link in your home directory.</p> <p>To create the link, start from your home directory, <code>cd ~</code>. Then, create a symbolic link in your home dir with <code>ln -s /home/course_data ~/course_data</code>. If you've created the link successfully, when you run <code>ls -l</code> you should see the link listed, with the entry for the link looking something like this:</p> <pre><code>$ ls -l\n...\nlrwxrwxrwx 1 u_000000 g_000000 17 Jan  2 17:00 course_data -&gt; /home/course_data\n...\n</code></pre> <p>Now the shared folder will appear in your home directory like any other folder, even though it is in a shared location. You only have to do this once, since the link persists in your home directory.</p>"},{"location":"teaching-staff-access/","title":"Teaching Staff Access to JupyterHub","text":"<p>Instructors and TAs/TFs have access to admin tools in JupyterHub to help students with their environments. The Admin interface can be accessed from the JupyterHub homepage, visible when JupyterHub is first launched from Canvas. If a member of course staff has already started their server and entered a JupyterLab environment, they can get back to the JupyterHub homepage through File -&gt; Hub Control Panel at the top of the page.</p>"},{"location":"teaching-staff-access/#jupyterhub-usernames","title":"JupyterHub Usernames","text":"<p>In the Admin panel, you will see a list of student servers. The usernames in JupyterHub come from unique user IDs in Canvas, which are distinct from other identifiers like HUIDs or netIDs. Any user in JupyterHub can see their user ID in the top right corner of the JupyterHub interface. </p> <p>To find the Canvas user ID for a student outside of JupyterHub, find them in the list of people on the Canvas \"People\" page and click on their name you should be taken to a profile page for the student. If a sidebar pops up on the right, click the student's name in the sidebar to get to this profile page. The number at the end of the url for this page is the student's Canvas ID, which is also their username in JupyterHub. That url will look similar to this: <code>https://canvas.harvard.edu/courses/&lt;course_id&gt;/users/&lt;user_id&gt;</code>. If you use Safari, you may have to click in to the URL bar to see the full url of the page.</p> <p>Warning</p> <p>Do not change JupyterHub usernames</p> <p>Admins have permission to change usernames in the admin dashboard, but doing so will break access for that user. The numeric user names are used in the authentication process, so changing them will result in a new user being created and permissions errors server-side when launching Jupyterhub, preventing the launch from completing successfully.</p>"},{"location":"teaching-staff-access/#managing-student-servers","title":"Managing Student Servers","text":"<p>Once you have identified the student whose server you want to troubleshoot, you can access their server with the \"Access Server\" button in the row with their username. This will give you access to their running server, where you can directly view their files and notebooks and interact with their environment.</p> <p>You can also stop their server if it is not responding and they are having difficulty stopping it themselves. They will be able to launch a fresh server once their server has stopped.</p>"},{"location":"teaching-staff-access/#managing-the-hub","title":"Managing the Hub","text":"<p>The \"Start All\", \"Stop All\", and \"Shutdown Hub\" buttons should not be used by course staff. These will affect the entire JupyterHub setup for the course, and may have effects that course staff will be unable to undo. If there is an issue affectign the entire course setup, please reach out to atg@fas.harvard.edu so that we can address the issue. If an issue is affecting an entire course, there is likely a problem with a system that course staff do not have access to, and developers within Academic Technology will need to diagnose and address the issue.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#what-should-i-do-if-my-notebook-is-hangingnon-responsive","title":"What should I do if my notebook is hanging/non-responsive?","text":"<ul> <li>First try to restart your Jupyter Kernel. From your notebook, go to Kernel &gt; Shutdown and confirm by clicking the Shutdown button. Then click on Kernel &gt; Restart Kernel...</li> <li>If restarting your kernel did not resolve the problem, try restarting your Jupyter server. Go to your JupyterHub home page via File &gt; Hub Control Panel. From there, you can click on the \"Stop My Server\" button. Wait a minute or two for your server to completely stop and then click Start My Server.</li> <li>If restarting your kernel or server did not resolve the problem, contact your instructor or other course staff. If you are course staff, or cannont resolve the issue with their help, reach out to atg@fas.harvard.edu for assistance.</li> </ul>"},{"location":"troubleshooting/#when-i-try-to-save-i-get-an-invalid-response-403-error","title":"When I try to save, I get an \"Invalid response: 403\" error","text":"<p>Symptoms: This error accompanies other problems like disappearing text in cells, and the error message popping up on its own. The best way to verify is to try to save a file and see if you see the text \"Invalid response: 403\".</p> <p>Solution: This indicates a networking issue that needs to be resolved by the developers that maintain the JupyterHub configuration. The problem is usually specific to a single file, or triggered by trying to save certain code. To help us fix this issue as quickly as possible, please send a message to atg@fas.harvard.edu with your name, what class you are using JupyterHub in, and the name of the file that you were editing when the error occurred.</p> <p>We have only observed this error in Safari and Chrome, so using Firefox may be a way to continue working in the meantime.</p> <p>We have also observed that once the file stops saving, the download option in JupyterLab will no longer reflect current changes. To back up the work you have done, you will need to copy the most recently edited cells into another text file. Since this error prevents files from being saved, we recommend stopping work in a notebook where this error occurs as soon as you see it, as any work you do after encountering it is likely to be lost.</p>"},{"location":"troubleshooting/#when-importing-matplotlib-i-get-an-error-about-a-cache-directory","title":"When importing matplotlib, I get an error about a cache directory","text":"<p>Symptoms: When importing <code>matplotlib.pyplot</code>, as in via the following code,</p> <pre><code>import matplotlib.pyplot as plt\n</code></pre> <p>you may encounter an error like this:</p> <p><code>Matplotlib created a temporary config/cache directory at /tmp/matplotlib-nj9ket54 because the default path (/home/jovyan/.cache/matplotlib) is not a writable directory; it is highly recommended to set the MPLCONFIGDIR environment variable to a writable directory, in particular to speed up the import of Matplotlib and to better support multiprocessing.</code></p> <p>Solution: The library will still work, but may not perform as well. To fix this, add the following code to notebooks before importing <code>matplotlib.pyplot</code>:</p> <pre><code>import os\nos.environ[\"MPLCONFIGDIR\"] = os.path.join(os.getcwd(), \".cache/matplotlib\")\n</code></pre> <p>This will configure <code>matplotlib</code> to use a cache directory in your own home directory, where it won't have any trouble writing whatever it needs to. You may not need the <code>import os</code> if you've already imported it.</p>"}]}